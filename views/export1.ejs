<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title><%= title %></title>
    <style>
        body {
            font-family: Arial, sans-serif;
            font-size: 12px;
            margin: 0;
            padding: 20px;
        }
        .container {
            margin-bottom: 40px;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            border: 1px solid black;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid black;
            padding: 5px;
            text-align: center;
        }
        th {
            background-color: #f4f4f4;
        }
        .header-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .note {
            font-style: bold;
            text-align: end;
        }
        .button-container {
            margin: 20px 0;
        }
        button {
            padding: 8px 16px;
            margin-right: 10px;
        }
        .measurement {
            color: black;
        }
        .out-of-range {
            color: red;
        }
        .inspection-box {
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #ccc;
        }
        .inspection-controls {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .toggle-button {
            width: 60px;
            height: 30px;
            cursor: pointer;
        }
        .toggle-green {
            background-color: #90EE90;
        }
        .toggle-red {
            background-color: #FFB6C1;
        }
        .number-input {
            width: 80px;
        }
        .hidden {
            display: none;
        }
    </style>
    <script src="/path/to/your/getMeasurements.js"></script>
</head>
<body>
    <!-- Inspection Controls -->
    <div id="inspectionControls" class="hidden">
        <h3>検査コントロール</h3>
        <div class="inspection-box">
            <h4>ファイル: <span id="currentFile"></span></h4>
            <div class="inspection-controls">
                <button class="toggle-button" data-index="5" onclick="toggleState(this)">-</button>
                <button class="toggle-button" data-index="6" onclick="toggleState(this)">-</button>
                <button class="toggle-button" data-index="13" onclick="toggleState(this)">-</button>
                <button class="toggle-button" data-index="14" onclick="toggleState(this)">-</button>
                <input type="number" class="number-input" data-index="15" step="0.1" onchange="updateValue(this)">
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="container">
        <h2>検査シート</h2>
        <div class="header-info">
            <div>
                <strong>品名:</strong> 水平ノズル
                <strong>室温:</strong> 22.0°
                <strong>湿度:</strong> 30%
                <strong>仕様書番号:</strong> KDMP-0434
                <strong>担当者:</strong> 苗村
            </div>
        </div>
        <div class="header-info">
            <div>
                <strong>図番:</strong> P2MM302000
                <strong>数量:</strong> 15個
                <strong>検査方法:</strong> 全数検査
            </div>
            <div>㈱平田商店</div>
        </div>
        
        <div class="note">
            <div>単位（ｍｍ）</div>
        </div>

        <table>
            <thead>
                <tr>
                    <th>項目</th>
                    <th>①</th>
                    <th>②</th>
                    <th>③</th>
                    <th>④</th>
                    <th>⑤</th>
                    <th>⑥</th>
                    <th>⑥</th>
                    <th>⑥</th>
                    <th>⑦</th>
                    <th>⑧</th>
                    <th>⑨</th>
                    <th>⑩</th>
                    <th>ⓐ〜ⓔ</th>
                    <th>外観</th>
                    <th>質量</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>図面寸法</td>
                    <td>8.2</td>
                    <td>37.5</td>
                    <td>15.9</td>
                    <td>24.1</td>
                    <td>Φ11.2</td>
                    <td>Φ3.2全貫通</td>
                    <td>Φ8.0</td>
                    <td>深さ5.0</td>
                    <td>P.C.D 30</td>
                    <td>Φ155.4</td>
                    <td>83.1</td>
                    <td>Φ122.3</td>
                    <td>嵌め合い</td>
                    <td>目視点検</td>
                    <td>（参考値）</td>
                </tr>
                <tr>
                    <td>寸法公差</td>
                    <td>±0.2</td>
                    <td>±0.3</td>
                    <td>±0.2</td>
                    <td>±0.2</td>
                    <td>＋0.2/0</td>
                    <td>±0.1</td>
                    <td>±0.2</td>
                    <td>±0.1</td>
                    <td>±0.2</td>
                    <td>±0.5</td>
                    <td>±0.3</td>
                    <td>±0.5</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <% if (data && Array.isArray(data)) { %>
                    <% data.forEach((item, dataIndex) => { %>
                        <tr>
                            <td><%= item.fileName %></td>
                            <% 
                            const measurements = getMeasurements(item.filteredValues, selected_indices);
                            const inspectionData = item.inspectionValues || {};
                            %>
                            <% for (let i = 0; i < 16; i++) { %>
                                <td>
                                    <% if (i >= 0 && i <= 4) { %>
                                        <%- measurements[i] || '-' %>
                                    <% } else if (i === 5) { %>
                                        <%= inspectionData[0] || '-' %>
                                    <% } else if (i === 6) { %>
                                        <%= inspectionData[1] || '-' %>
                                    <% } else if (i === 13) { %>
                                        <%= inspectionData[2] || '-' %>
                                    <% } else if (i === 14) { %>
                                        <%= inspectionData[3] || '-' %>
                                    <% } else if (i === 15) { %>
                                        <%= inspectionData[4] || '-' %>
                                    <% } else { %>
                                        <%- measurements[i] || '-' %>
                                    <% } %>
                                </td>
                            <% } %>
                        </tr>
                    <% }); %>
                <% } %>
            </tbody>
        </table>

        <div class="note">
            ＊着脱容易なシールに識別番号を記載し製品裏の底面に貼り付ける。
        </div>
    </div>

    <div class="button-container">
        <button onclick="window.location.href='/'">アップロードに戻る</button>
        <button onclick="window.print()">印刷</button>
        <button id="inspectorButton" onclick="toggleInspector()">検査</button>
    </div>

    <script>
        // Initialize measurement limits
        const measurementLimits = {
            0: { min: 8.0, max: 8.4 },
            1: { min: 37.2, max: 37.8 },
            2: { min: 15.7, max: 16.1 },
            3: { min: 23.9, max: 24.3 },
            6: { min: 3.1, max: 3.3 },
            7: { min: 7.8, max: 8.2 },
            8: { min: 4.9, max: 5.1 },
            9: { min: 29.8, max: 30.2 },
            10: { min: 154.9, max: 155.9 },
            11: { min: 82.8, max: 83.4 }
        };

        // Initialize measurement mapping
        const measurementMap = {
            103: 0,  // ①
            99: 1,   // ②
            177: 2,  // ③
            158: 3,  // ④
            114: 6,  // ⑥
            182: 7,  // ⑥
            193: 8,  // ⑥
            79: 9,   // ⑦
            148: 10, // ⑧
            174: 11  // ⑨
        };

        let currentFileIndex = 0;
        let inspectionData = <%- JSON.stringify(data || []) %>;
        document.addEventListener('DOMContentLoaded', () => {
            updateCurrentFile();
        });
        function getMeasurements(filteredValues, selected_indices) {
            // Input validation
            if (!Array.isArray(filteredValues) || !Array.isArray(selected_indices)) {
                console.error('Invalid input: filteredValues and selected_indices must be arrays');
                return Array(16).fill('-');
            }
        
            const measurements = Array(16).fill('-');
            
            try {
                filteredValues.forEach((value, index) => {
                    // Skip if index is out of bounds
                    if (index >= selected_indices.length) return;
        
                    const columnIndex = selected_indices[index];
                    const tableIndex = measurementMap[columnIndex];
                    
                    // Handle empty or invalid values
                    if (tableIndex !== undefined && value !== '' && value != null) {
                        // Convert to number and handle invalid number strings
                        const numberValue = Number(value);
                        if (isNaN(numberValue)) {
                            console.warn(`Invalid number value at index ${index}: ${value}`);
                            return;
                        }
        
                        const numValue = Math.abs(numberValue).toFixed(2);
                        const limits = measurementLimits[tableIndex];
                        const isOutOfRange = limits && (numValue < limits.min || numValue > limits.max);
                        
                        // Create safe HTML string for EJS
                        measurements[tableIndex] = isOutOfRange 
                            ? `<span class="out-of-range">${numValue}</span>`
                            : `<span class="measurement">${numValue}</span>`;
                    }
                });
            } catch (error) {
                console.error('Error in getMeasurements:', error);
                return Array(16).fill('-');
            }
            
            return measurements;
        }

        function toggleInspector() {
            const controls = document.getElementById('inspectionControls');
            controls.classList.toggle('hidden');
            updateCurrentFile();
        }

        function updateCurrentFile() {
            const fileElement = document.getElementById('currentFile');
            if (inspectionData && inspectionData.length > 0) {
                fileElement.textContent = inspectionData[currentFileIndex].fileName;
            }
        }

        function toggleState(button) {
            const states = ['', '合', '否'];
            const colors = ['', 'toggle-green', 'toggle-red'];
            
            let currentStateIndex = states.indexOf(button.textContent);
            currentStateIndex = (currentStateIndex + 1) % states.length;
            
            button.textContent = states[currentStateIndex];
            button.className = 'toggle-button ' + colors[currentStateIndex];
            
            updateInspectionValue(button.dataset.index, states[currentStateIndex]);
        }

        function updateValue(input) {
            const value = parseFloat(input.value);
            if (!isNaN(value)) {
                updateInspectionValue(input.dataset.index, value.toFixed(1));
            }
        }

        function updateInspectionValue(index, value) {
            fetch('/api/inspection/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    fileIndex: currentFileIndex,
                    valueIndex: parseInt(index),
                    value: value
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Optionally update the UI without refreshing
                    const row = document.querySelector(`table tbody tr:nth-child(${currentFileIndex + 3})`);
                    if (row) {
                        const cell = row.children[parseInt(index)];
                        if (cell) {
                            cell.textContent = value;
                        }
                    }
                }
            })
            .catch(error => console.error('Error updating inspection value:', error));
        }

        // Initialize inspector if data is available
        if (inspectionData && inspectionData.length > 0) {
            document.getElementById('inspectorButton').disabled = false;
        } else {
            document.getElementById('inspectorButton').disabled = true;
        }
    </script>
</body>
</html>